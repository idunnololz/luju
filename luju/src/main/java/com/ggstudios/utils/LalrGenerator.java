package com.ggstudios.utils;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

class Maker {
    private Writer writer = null;
    private BufferedReader reader = null;

    private static void pln(String s) {
        System.out.println(s);
    }

    private boolean isTerm(String tok) {
        char c = tok.charAt(0);
        return c >= 'A' && c <= 'Z';
    }

    public void generateFileHeader() throws IOException {
        String s = "// This file was generated by LalrGenerator.java and should not be changed directly.\n" +
                "// Any changes made to this file directly will not be reflected in the grammar changes.\n" +
                "package com.ggstudios.luju;\n\n" +
                "import java.util.ArrayList;\n" +
                "import java.util.HashMap;\n" +
                "import java.util.List;\n" +
                "import java.util.Map;\n\n" +
                "public class LalrTable {\n" +
                "    public static class LrProduction {\n" +
                "        int lhs;\n" +
                "        int[] rhs;\n\n" +
                "        public LrProduction(int lhs, int[] rhs) {\n" +
                "            this.lhs = lhs;\n" +
                "            this.rhs = rhs;\n" +
                "        }\n" +
                "    }\n\n" +
                "    public static LrProduction getProduction(int i) {\n" +
                "        return rulemap[i];\n" +
                "    }\n\n" +
                "    public static int getLrAction(int i, int term) {\n" +
                "        return actionMap.get(i + (term << 16));\n" +
                "    }\n\n" +
                "    public static int getLrGoto(int i) {\n" +
                "        return gotoMap.get(i);\n" +
                "    }\n";
        writer.write(s);
    }

    public void generateTerms() throws NumberFormatException, IOException {
        int termCount = Integer.valueOf(reader.readLine());
        StringBuffer sb = new StringBuffer();
        StringBuffer sb2 = new StringBuffer();
        StringBuffer sb3 = new StringBuffer();
        for (int i = 0; i < termCount; i++) {
            sb.append("    public static final int TERM_");
            String s = reader.readLine();
            sb.append(s);
            sb.append(" = 0x");
            sb.append(Integer.toHexString(i));
            sb.append(";\n");

            sb2.append("a.put(\"");
            sb2.append(s);
            sb2.append("\", TERM_");
            sb2.append(s);
            sb2.append(");\n");

            sb3.append("b.put(TERM_");
            sb3.append(s);
            sb3.append(", \"");
            sb3.append(s);
            sb3.append("\");\n");
        }
        sb.append("\n");
        sb2.append("\n");
        writer.append(sb.toString());
        writer.append(sb2.toString());
        writer.append(sb3.toString());
    }

    public void generateNonTerms() throws NumberFormatException, IOException {
        int count = Integer.valueOf(reader.readLine());
        StringBuffer sb = new StringBuffer();
        StringBuffer sb2 = new StringBuffer();
        StringBuffer sb3 = new StringBuffer();
        for (int i = 0; i < count; i++) {
            sb.append("    public static final int NONT_");
            String s = reader.readLine();
            sb.append(s.toUpperCase());
            sb.append(" = 0x");
            sb.append(Integer.toHexString(i + 0x80000000));
            sb.append(";\n");

            sb2.append("a.put(\"");
            sb2.append(s);
            sb2.append("\", NONT_");
            sb2.append(s.toUpperCase());
            sb2.append(");\n");

            sb3.append("b.put(NONT_");
            sb3.append(s.toUpperCase());
            sb3.append(", \"");
            sb3.append(s);
            sb3.append("\");\n");
        }
        sb.append("\n");
        sb2.append("\n");
        writer.append(sb.toString());
        writer.append(sb2.toString());
        writer.append(sb3.toString());
    }

    public void generateStartState() throws IOException {
        writer.append("    public static final int START_STATE = NONT_");
        writer.append(reader.readLine().toUpperCase());
        writer.append(";\n\n");
    }

    int states;

    public void generateRules() throws IOException {
        int count = Integer.valueOf(reader.readLine());
        StringBuffer sb = new StringBuffer();
        sb.append("    private static final List<LrProduction> rulemap = new ArrayList<>();\n");
        sb.append("    static {\n");

        for (int i = 0; i < count; i++) {
            String[] toks = reader.readLine().split(" ");
            sb.append("        rulemap.add(new LrProduction(NONT_");
            sb.append(toks[0].toUpperCase());
            sb.append(", new int[] {");

            for (int j = 1; j < toks.length; j++) {
                if (isTerm(toks[j])) {
                    sb.append("TERM_");
                    sb.append(toks[j]);
                } else {
                    sb.append("NONT_");
                    sb.append(toks[j].toUpperCase());
                }
                sb.append(", ");
            }
            if (toks.length > 1) {
                sb.setLength(sb.length() - 2);
            }
            sb.append("}));\n");
        }

        states = Integer.valueOf(reader.readLine());

        sb.append("    }");
        writer.append(sb.toString());
        writer.append("\n\n    private static final int NUM_STATES = ");
        writer.append(String.valueOf(states));
        writer.append(";\n");

    }

    private static final int TO_UPPER = 'A' - 'a';

    public void generateActionGotoMap() throws IOException {
        int count = Integer.valueOf(reader.readLine());
        StringBuffer acts = new StringBuffer();
        StringBuffer gotos = new StringBuffer();

        int actLen = 0;
        int gotoLen = 0;

        for (int i = 0; i < count; i++) {
            String[] toks = reader.readLine().split(" ");
            if (isTerm(toks[1])) {
                acts.append("        actionMap.put(");
                acts.append(toks[0]);
                acts.append(" + (TERM_");
                acts.append(toks[1]);
                acts.append(" << 16), ");
                acts.append(toks[2].toUpperCase());
                acts.append(" | ");
                acts.append(toks[3]);
                acts.append(");\n");
                actLen++;
            } else {
                gotos.append("        gotoMap.put(");
                gotos.append(toks[0]);
                gotos.append(" + (NONT_");
                gotos.append(toks[1].toUpperCase());
                gotos.append(" << 16), ");
                gotos.append(toks[3]);
                gotos.append(");\n");
                gotoLen++;
            }
        }

        acts.setLength(acts.length() - 1);
        gotos.setLength(gotos.length() - 1);

        writer.append("    private static final int SHIFT = 0x80000000;\n");
        writer.append("    private static final int REDUCE = 0x40000000;\n");
        writer.append("    private static final Map<Integer, Integer> actionMap = new HashMap<>();\n");
        writer.append("    private static final Map<Integer, Integer> gotoMap = new HashMap<>();\n");
        writer.append("\n    static {\n");
        writer.append(acts.toString());
        writer.append("\n\n");
        writer.append(gotos.toString());
        writer.append("\n    }\n}");
    }

    public void make(String in, String out) {
        File file = new File(in);

        try {
            writer = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream(out), "utf-8"));

            reader = new BufferedReader(new FileReader(file));

            generateFileHeader();
            generateTerms();
            generateNonTerms();
            generateStartState();
            generateRules();
            generateActionGotoMap();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (writer != null) {
                    writer.close();
                }

                if (reader != null) {
                    reader.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}

public class LalrGenerator {
    public static void main(String[] args) {
        Maker maker = new Maker();
        maker.make(args[0], args[1]);
    }
}
